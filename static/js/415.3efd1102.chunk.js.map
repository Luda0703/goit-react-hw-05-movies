{"version":3,"file":"static/js/415.3efd1102.chunk.js","mappings":"oKA+BA,IA5BkB,SAAC,GAAgB,IAAdA,EAAa,EAAbA,OACZC,GAAWC,EAAAA,EAAAA,MAGlB,OADAC,QAAQC,IAAI,CAACJ,OAAAA,KAEX,+BACE,wBACGA,GAAUA,EAAOK,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,eAAP,OACpB,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaF,GAAMG,MAAO,CAAEC,KAAMT,GAA1C,UACE,wBAAKM,OAFAD,EADW,OAU7B,C,kHCsBD,UApCa,WACT,OAA4BK,EAAAA,EAAAA,UAAS,IAArC,eAAOX,EAAP,KAAeY,EAAf,KACA,GAA0BD,EAAAA,EAAAA,UAAS,MAAnC,eAAOE,EAAP,KAAcC,EAAd,KACA,GAAkCH,EAAAA,EAAAA,WAAS,GAA3C,eAAOI,EAAP,KAAkBC,EAAlB,KACMC,GAAgBC,EAAAA,EAAAA,SAAO,GAuB7B,OApBAC,EAAAA,EAAAA,YAAU,WACN,GAAGF,EAAcG,QACdH,EAAcG,SAAU,MAD3B,CAKA,IAAMC,EAAe,mCAAG,2FACpBL,GAAa,GADO,mBAGGM,EAAAA,EAAAA,MAHH,OAGVC,EAHU,OAIhBX,EAAUW,EAAKC,SAJC,gDAMhBV,EAAS,KAAMW,SANC,yBAQhBT,GAAa,GARG,4EAAH,qDAWrBK,GAbC,CAcJ,GAAE,KAGC,gCACCrB,EAAO0B,OAAS,IAAK,SAAC,IAAD,CAAW1B,OAAQA,IACxCe,IAAa,SAAC,IAAD,IACbF,IAAS,yBAAMA,MAGvB,C,+ICtCKc,EAAW,+BACXC,EAAG,mCAEF,SAAeN,IAAtB,4CAAO,OAAP,oBAAO,2GAAyBO,EAAzB,+BAA8B,EAA9B,SACsBC,EAAAA,EAAAA,IAAA,UACpBH,EADoB,wCACoBC,EADpB,iBACgCC,EADhC,oBADtB,uBACIE,EADJ,EACIA,SADJ,kBAIIA,EAASR,MAJb,mEAQA,SAAeS,EAAtB,+CAAO,OAAP,oBAAO,WAA8BC,GAA9B,uFACkBH,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iCACeC,EADf,kBAC4BK,EAD5B,oBADlB,cACCF,EADD,yBAIEA,EAASR,MAJX,kEAOA,SAAeW,EAAtB,+CAAO,OAAP,oBAAO,WAAgCC,GAAhC,uFACkBL,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAQ,EADA,oBACoBP,EADpB,oBADlB,cACCG,EADD,yBAIEA,EAASR,MAJX,kE","sources":["components/MovieList/MovieList.jsx","pages/Home.jsx","servise/servise.jsx"],"sourcesContent":["import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst MovieList = ({ movies }) => {\n   const location = useLocation();\n   \n  console.log({movies})\n  return (\n    <>\n      <ul>\n        {movies && movies.map(({ id, original_title }) => (\n          <li key={id}>\n            <Link to={`/movies/${id}`} state={{ from: location}}>\n              <h3>{original_title}</h3>\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n\nMovieList.propTypes = {\n    movies: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        original_title: PropTypes.string.isRequired,\n      })\n    ).isRequired,\n  };\n\nexport default MovieList;","import { useState, useEffect, useRef} from \"react\";\nimport { getMovies } from \"servise/servise\";\nimport MovieList from \"components/MovieList/MovieList\";\nimport { Loader } from \"components/Loader/Loader\";\n\n\nconst Home = () => {\n    const [movies, setMovies] = useState([]);\n    const [error, setError] = useState(null);\n    const [isLoading, setIsLoading] = useState(false);\n    const isFirstRender = useRef(true);\n    \n\n    useEffect(() => {\n        if(isFirstRender.current) {\n           isFirstRender.current = false;\n           return ;\n        }\n\n        const getSearchMovies = async () => {\n            setIsLoading(true);\n            try {\n                const data = await getMovies();\n                setMovies(data.results);\n            } catch (error) {\n                setError(error.massage);\n            } finally {\n                setIsLoading(false);\n              }\n        }\n        getSearchMovies()\n    }, [])\n\n    return (\n        <>\n        {movies.length > 0 && <MovieList movies={movies} />}\n        {isLoading && <Loader />}\n        {error && <div>{error}</div>}\n        </>\n    )\n}\n\nexport default Home;\n\n","import axios from 'axios'\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst KEY = `0481b46021a7a1a44f55c7836fc47fbf`;\n\nexport async function getMovies(page=1) {\n    const {responce} = await axios.get(   \n      `${BASE_URL}/trending/movie/week?api_key=${KEY}&page=${page}&language=en-US`\n    );\n    return responce.data;\n}\n\n\nexport async function getMoviesQuery(query) {\n  const responce = await axios.get(\n    `${BASE_URL}/search/movie?api_key=${KEY}&query=${query}&language=en-US`\n  );\n  return responce.data;\n}\n\nexport async function getMoviesDetails(movie_id) {\n  const responce = await axios.get(\n    `${BASE_URL}/movie/${movie_id}?api_key=${KEY}&language=en-US`\n  );\n  return responce.data;\n}\n"],"names":["movies","location","useLocation","console","log","map","id","original_title","to","state","from","useState","setMovies","error","setError","isLoading","setIsLoading","isFirstRender","useRef","useEffect","current","getSearchMovies","getMovies","data","results","massage","length","BASE_URL","KEY","page","axios","responce","getMoviesQuery","query","getMoviesDetails","movie_id"],"sourceRoot":""}