{"version":3,"file":"static/js/736.25df679b.chunk.js","mappings":"gSAEaA,EAAWC,EAAAA,EAAAA,GAAH,mHAORC,EAAUD,EAAAA,EAAAA,IAAH,gNAOPE,EAAQF,EAAAA,EAAAA,EAAH,sH,SCwClB,EA9Ca,WACT,OAAwBG,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAkCJ,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,SAERE,EAAAA,EAAAA,YAAU,WAENC,EAAsBH,EACzB,GAAE,CAACA,IACJ,IAAMG,EAAqB,mCAAG,WAAOH,GAAP,8EAC1BD,GAAa,GADa,mBAGHK,EAAAA,EAAAA,IAAqBJ,GAHlB,OAGhBK,EAHgB,OAItBV,EAAQU,EAAKX,MAJS,gDAMtBG,EAAS,KAAMS,SANO,yBAQxBP,GAAa,GARW,4EAAH,sDAY3B,OACI,iCACA,SAACV,EAAD,UACCK,EAAKa,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,cAAeC,EAApC,EAAoCA,UAApC,OACN,2BACE,SAACpB,EAAD,CACMqB,IACEH,EAAY,yCAC0BA,GAD1B,gDAIdI,IAAKH,KAEX,UAAClB,EAAD,WAAO,WAASkB,MAChB,UAAClB,EAAD,WAAO,cAAYmB,OAVZH,EADH,MAeTV,IAAa,SAACgB,EAAA,EAAD,IACblB,IAAS,yBAAMA,MAIvB,C,mMCrDKmB,EAAW,+BACXC,EAAG,mCAEF,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,yGAAyBC,EAAzB,+BAA8B,EAA9B,SACoBC,EAAAA,EAAAA,IAAA,UAClBJ,EADkB,uCACqBC,EADrB,iBACiCE,IAFrD,cACGE,EADH,yBAIIA,EAASf,MAJb,mEAQA,SAAegB,EAAtB,+CAAO,OAAP,oBAAO,WAA8BC,GAA9B,uFACkBH,EAAAA,EAAAA,IAAA,UAClBJ,EADkB,iCACeC,EADf,kBAC4BM,IAF9C,cACCF,EADD,yBAIEA,EAASf,MAJX,kEAOA,SAAekB,EAAtB,+CAAO,OAAP,oBAAO,WAAgCf,GAAhC,uFACkBW,EAAAA,EAAAA,IAAA,UAClBJ,EADkB,kBACAP,EADA,oBACcQ,IAFhC,cACCI,EADD,yBAIEA,EAASf,MAJX,kEAOA,SAAeD,EAAtB,+CAAO,OAAP,oBAAO,WAAoCoB,GAApC,uFACkBL,EAAAA,EAAAA,IAAA,UAClBJ,EADkB,kBACAS,EADA,4BAC4BR,IAF9C,cACCI,EADD,yBAIEA,EAASf,MAJX,kEAOA,SAAeoB,EAAtB,+CAAO,OAAP,oBAAO,WAAuCzB,GAAvC,uFACkBmB,EAAAA,EAAAA,IAAA,UAClBJ,EADkB,kBACAf,EADA,4BAC2BgB,IAF7C,cACCI,EADD,yBAIEA,EAASf,MAJX,kE","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","servise/servise.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const CastList = styled.ul`\ndisplay: flex;\nlist-style: none;\ntext-decoration: none;\nflex-wrap: wrap;\n  gap: 15px;\n`\nexport const CastImg = styled.img`\nmax-width: 200px;\nheight: 300px;\nborder-radius: 8px;\nbox-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2),\n  0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n`\nexport const CastP = styled.p`\nfont-family: 'Poppins';\nfont-weight: 400;\nfont-size: 16px;\ncolor: #191970;\nwidth: 200px;\n`","import { Loader } from \"components/Loader/Loader\";\nimport { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { getMoviesDetailsCast } from \"servise/servise\";\nimport { \n    CastList,\n    CastImg,\n    CastP\n } from \"./Cast.styled\";\n\nconst Cast = () => {\n    const [cast, setCast] = useState([]);\n    const [error, setError] = useState(null); \n    const [isLoading, setIsLoading] = useState(false);\n    const { movieId } = useParams();\n\n    useEffect(() => {\n       \n        serchMovieDetailsCast(movieId);\n    }, [movieId])\n    const serchMovieDetailsCast = async (movieId) => {\n        setIsLoading(true);\n        try {\n            const data = await getMoviesDetailsCast(movieId);\n            setCast(data.cast);\n        } catch (error) {\n            setError(error.massage);\n        } finally {\n          setIsLoading(false);\n        }\n    }\n\n    return (\n        <>\n        <CastList>\n        {cast.map(({ id, profile_path, original_name, character }) => (\n            <li key={id}>\n              <CastImg\n                    src={\n                      profile_path\n                        ? `https://image.tmdb.org/t/p/w200${profile_path}`\n                        : `https://www.suryalaya.org/images/no_image.jpg`\n                    }\n                    alt={original_name}   \n                  />\n              <CastP> Actor: {original_name}</CastP>\n              <CastP>Character: {character}</CastP>\n            </li>\n          ))}\n        </CastList>\n        {isLoading && <Loader />}\n        {error && <div>{error}</div>}\n        </>\n    )\n\n}\nexport default Cast;","import axios from 'axios'\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst KEY = `0481b46021a7a1a44f55c7836fc47fbf`;\n\nexport async function getMovies(page=1) {\n    const responce = await axios.get(   \n      `${BASE_URL}/trending/movie/day?api_key=${KEY}&page=${page}`\n    )\n    return responce.data;\n}\n\n\nexport async function getMoviesQuery(query) {\n  const responce = await axios.get(\n    `${BASE_URL}/search/movie?api_key=${KEY}&query=${query}`\n  )\n  return responce.data;\n}\n\nexport async function getMoviesDetails(id) {\n  const responce = await axios.get(\n    `${BASE_URL}/movie/${id}?api_key=${KEY}`\n  )\n  return responce.data;\n}\n\nexport async function getMoviesDetailsCast(movie_id) {\n  const responce = await axios.get(\n    `${BASE_URL}/movie/${movie_id}/credits?api_key=${KEY}`\n  )\n  return responce.data;\n}\n\nexport async function getMoviesDetailsReviews(movieId) {\n  const responce = await axios.get(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${KEY}`\n  );\n  return responce.data;\n}\n"],"names":["CastList","styled","CastImg","CastP","useState","cast","setCast","error","setError","isLoading","setIsLoading","movieId","useParams","useEffect","serchMovieDetailsCast","getMoviesDetailsCast","data","massage","map","id","profile_path","original_name","character","src","alt","Loader","BASE_URL","KEY","getMovies","page","axios","responce","getMoviesQuery","query","getMoviesDetails","movie_id","getMoviesDetailsReviews"],"sourceRoot":""}